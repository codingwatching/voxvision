/**
   @file voxvision.h
   @brief Types and declarations for voxvision libraries
**/

#ifndef VOXVISION_H
#define VOXVISION_H


/**
   \brief Use SSE intrinsics
**/
#cmakedefine SSE_INTRIN

#define VOX_VERSION_MAJOR @voxvision_VERSION_MAJOR@
#define VOX_VERSION_MINOR @voxvision_VERSION_MINOR@
#define VOX_VERSION "@voxvision_VERSION@"

// Types
/*
  Data type layout:
  1) vox_dot

  ----+---+---+------
  |   |   |   |     |
  | x | y | z | XXX |
  |   |   |   |     |
  ----+---+---+------

  0..........96....128

  2) vox_quat

  ----+---+---+----
  |   |   |   |   |
  | 1 | i | j | k |
  |   |   |   |   |
  ----+---+---+----
  0..............128
*/

#if defined(SSE_INTRIN)
#include <xmmintrin.h>
#include <smmintrin.h>
typedef float vox_dot[4] __attribute__ ((aligned (16)));
typedef float vox_quat[4] __attribute__ ((aligned (16)));
#define vox_dot_copy(d1, d2) _mm_store_ps (d1, _mm_load_ps (d2))
#define vox_dot_equalp(d1, d2) !(_mm_movemask_ps (_mm_load_ps (d1) != _mm_load_ps(d2)) & 7)
#else
typedef float vox_dot[3];
typedef float vox_quat[4];
#define vox_dot_copy(d1, d2) memcpy (d1, d2, sizeof (vox_dot))
#define vox_dot_equalp(d1, d2) (memcmp (d1, d2, sizeof (float) * 3) == 0)
#endif

/**
   \brief Structure representing a box.
**/
struct vox_box
{
    vox_dot min; /**< \brief minimal coordinate */
    vox_dot max; /**< \brief maximal coordinate */
};
#include <string.h>
#define vox_box_copy(b1, b2) memcpy ((b1), (b2), sizeof (struct vox_box))

#endif
